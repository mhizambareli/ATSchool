package lesson11.part4;

import static java.util.Arrays.*;
import static lesson11.part1.Main.getRandom;

/**
 * Реализуйте метод int median(int[] a), который возвращает целочисленное значение медианы массива а.
 * Для отсортированного массива четной длины медиана расчитывается как среднее арифметическое двух центральных элементов.
 * Для отсортированного массива нечетной длины медиана расчитывается как центральный элемент.
 * В общем случае, для набора 1 2 3 4 5 медиана равна 3, а для четного набора 1 2 3 4 5 6 медиана расчитывается как (3 + 4)/2 = 3.5
 * <p>
 * Для сортировки массива используйте метод Arrays.sort или метод bubbleSort из третьего задания.
 * Порядок элементов в исходном массиве, который передается в метод через аргумент, не должен быть изменен.
 * <p>
 * Напишите программу, которая создает массив из 20 целочисленных элементов,
 * заполняет случайным образом , выводит элементы в одну строку, разделив пробелами.
 * Затем, используя метод median, получите и выведите значение вычисленной медианы.
 * После этого вновь напечатайте элементы исходного массива в одну строку, разделив пробелами,
 * чтобы убедиться, что их порядок не изменился.
 * <p>
 * Пример работы программы:
 * Вывод:
 * Создан массив: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
 * Медиана: 10
 * Повторный ввод исходного массива: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
 */
public class Main {
    static int median(int[] a) {
        int[] b = a.clone(); //копируем исходный массив, дальнейшую сортировку и вычисления производим в этой копии
        sort(b);
        int n = b.length / 2;
        if (b.length % 2 == 1) return b[n];
        else return (b[n] + b[n - 1]) / 2;
    }

    /**
     * Метод заполняет массив рандомными целыми числами в заданном диапозоне
     *
     * @param a массив, который нужно заполнить рандомными числами
     * @param min минимальное значение для генерации целых чисел включительно
     * @param max максимальное значение для генерации целых чисел включительно
     * @return возвращает заполненный массив, либо пустой массив, если изначально передали пустой
     */
    public static int[] fillArray(int[] a, int min, int max) {
        if (a.length == 0)
            System.out.println("Пустой массив, заполнять нечего");
        else
            for (int i = 0; i < a.length; i++) a[i] = getRandom(min, max);
        return a;
    }

    /**
     * Метод печатает массив в формате одной строки, где значения разделены пробелами
     */
    static void printArray(int[] a) {
        String result = "";
        for (int i = 0; i < a.length; i++) result += a[i] + " ";
        System.out.println(result);
    }


    public static void main(String[] args) {
        int[] arr = new int[20];
        fillArray(arr, 1, 100);
        System.out.print("Сгенерированный массив: ");
        printArray(arr);
        System.out.println("Медиана: " + median(arr));
        System.out.print("Повторный вывод исходного массива: ");
        printArray(arr);
    }
}
